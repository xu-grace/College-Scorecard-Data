# Project: College Scorecard Data
# Project Instructions
# https://github.com/awesomedata/awesome-public-datasets
# PLUS one or more "related" sources of information
# Your merged dataset: 500 <= observations <= 5M, and >= 10 variables
setwd("C:/Users/acegi/Google Drive/Spring 2018/ITP 350/Project/CollegeScorecard_Raw_Data/")
# Libraries
library(readr)
library(Hmisc)
# Imports
files <- as.character(list.files(path="C:/Users/acegi/Google Drive/Spring 2018/ITP 350/Project/CollegeScorecard_Raw_Data/", pattern="*.csv",full.names=T,recursive=FALSE))
df = list()
# for(x in 1:length(files)){
#   df[x] = read.csv(files[x])
# }
df1 = read.csv("C:/Users/acegi/Google Drive/Spring 2018/ITP 350/Project/CollegeScorecard_Raw_Data/MERGED1996_97_PP.csv", stringsAsFactors = FALSE)
df2 = read.csv("C:/Users/acegi/Google Drive/Spring 2018/ITP 350/Project/CollegeScorecard_Raw_Data/MERGED1997_98_PP.csv", stringsAsFactors = FALSE)
df3 = read.csv("C:/Users/acegi/Google Drive/Spring 2018/ITP 350/Project/CollegeScorecard_Raw_Data/MERGED1998_99_PP.csv", stringsAsFactors = FALSE)
df4 = read.csv("C:/Users/acegi/Google Drive/Spring 2018/ITP 350/Project/CollegeScorecard_Raw_Data/MERGED1999_00_PP.csv", stringsAsFactors = FALSE)
df5 = read.csv("C:/Users/acegi/Google Drive/Spring 2018/ITP 350/Project/CollegeScorecard_Raw_Data/MERGED2000_01_PP.csv", stringsAsFactors = FALSE)
df6 = read.csv("C:/Users/acegi/Google Drive/Spring 2018/ITP 350/Project/CollegeScorecard_Raw_Data/MERGED2001_02_PP.csv", stringsAsFactors = FALSE)
df7 = read.csv("C:/Users/acegi/Google Drive/Spring 2018/ITP 350/Project/CollegeScorecard_Raw_Data/MERGED2002_03_PP.csv", stringsAsFactors = FALSE)
df8 = read.csv("C:/Users/acegi/Google Drive/Spring 2018/ITP 350/Project/CollegeScorecard_Raw_Data/MERGED2003_04_PP.csv", stringsAsFactors = FALSE)
df9 = read.csv("C:/Users/acegi/Google Drive/Spring 2018/ITP 350/Project/CollegeScorecard_Raw_Data/MERGED2004_05_PP.csv", stringsAsFactors = FALSE)
df10 = read.csv("C:/Users/acegi/Google Drive/Spring 2018/ITP 350/Project/CollegeScorecard_Raw_Data/MERGED2005_06_PP.csv", stringsAsFactors = FALSE)
df11 = read.csv("C:/Users/acegi/Google Drive/Spring 2018/ITP 350/Project/CollegeScorecard_Raw_Data/MERGED2006_07_PP.csv", stringsAsFactors = FALSE)
df12 = read.csv("C:/Users/acegi/Google Drive/Spring 2018/ITP 350/Project/CollegeScorecard_Raw_Data/MERGED2007_08_PP.csv", stringsAsFactors = FALSE)
df13 = read.csv("C:/Users/acegi/Google Drive/Spring 2018/ITP 350/Project/CollegeScorecard_Raw_Data/MERGED2008_09_PP.csv", stringsAsFactors = FALSE)
df14 = read.csv("C:/Users/acegi/Google Drive/Spring 2018/ITP 350/Project/CollegeScorecard_Raw_Data/MERGED2009_10_PP.csv", stringsAsFactors = FALSE)
df15 = read.csv("C:/Users/acegi/Google Drive/Spring 2018/ITP 350/Project/CollegeScorecard_Raw_Data/MERGED2010_11_PP.csv", stringsAsFactors = FALSE)
df16 = read.csv("C:/Users/acegi/Google Drive/Spring 2018/ITP 350/Project/CollegeScorecard_Raw_Data/MERGED2011_12_PP.csv", stringsAsFactors = FALSE)
df17 = read.csv("C:/Users/acegi/Google Drive/Spring 2018/ITP 350/Project/CollegeScorecard_Raw_Data/MERGED2012_13_PP.csv", stringsAsFactors = FALSE)
df18 = read.csv("C:/Users/acegi/Google Drive/Spring 2018/ITP 350/Project/CollegeScorecard_Raw_Data/MERGED2013_14_PP.csv", stringsAsFactors = FALSE)
df19 = read.csv("C:/Users/acegi/Google Drive/Spring 2018/ITP 350/Project/CollegeScorecard_Raw_Data/MERGED2014_15_PP.csv", stringsAsFactors = FALSE)
df20 = read.csv("C:/Users/acegi/Google Drive/Spring 2018/ITP 350/Project/CollegeScorecard_Raw_Data/MERGED2015_16_PP.csv", stringsAsFactors = FALSE)
df1$Year = 1996
df2$Year = 1997
df3$Year = 1998
df4$Year = 1999
df5$Year = 2000
df6$Year = 2001
df7$Year = 2002
df8$Year = 2003
df9$Year = 2004
df10$Year = 2005
df11$Year = 2006
df12$Year = 2007
df13$Year = 2008
df14$Year = 2009
df15$Year = 2010
df16$Year = 2011
df17$Year = 2012
df18$Year = 2013
df19$Year = 2014
df20$Year = 2015
full = rbind(df1, df2, df3, df4, df5, df6, df7, df8, df9, df10, df11, df12, df13, df14, df15, df16, df17, df18, df19, df20)
backup = full
full = backup
# Subsetting columns
full = full[,c("OPEID",
"Year",
"INSTNM",
"CITY",
"STABBR",
"ZIP",
"PREDDEG",
"HIGHDEG",
"CONTROL",
"REGION",
"LOCALE2",
"ADM_RATE",
"SATVR75",
"SATMT75",
"SATWR75",
"SATVRMID",
"SATMTMID",
"SATWRMID",
"ACTCM75",
"ACTEN75",
"ACTMT75",
"ACTWR75",
"ACTCMMID",
"ACTENMID",
"ACTMTMID",
"ACTWRMID",
"SAT_AVG",
"DISTANCEONLY",
"UGDS",
"UG",
"CURROPER",
"COSTT4_A",
"TUITIONFEE_IN",
"TUITIONFEE_OUT",
"TUITFTE",
"AVGFACSAL",
"PFTFAC",
"RET_FT4",
"CUML_DEBT_P75",
"CUML_DEBT_P25",
"AGE_ENTRY",
"FEMALE",
"MARRIED",
"VETERAN",
"FIRST_GEN",
"FAMINC",
"MD_FAMINC")]
# Creating a vector of labels
labels = c("OPEID",
"Year",
"Institution name",
"City",
"State postcode",
"ZIP code",
"'Predominant undergraduate degree awarded
0 Not classified
1 Predominantly certificate-degree granting
2 Predominantly associate's-degree granting
3 Predominantly bachelor's-degree granting
4 Entirely graduate-degree granting'",
"'Highest degree awarded
0 Non-degree-granting
1 Certificate degree
2 Associate degree
3 Bachelor's degree
4 Graduate degree'",
"Control of institution",
"Region (IPEDS)",
"Degree of urbanization of institution",
"Admission rate",
"75th percentile of SAT scores at the institution (critical reading)",
"75th percentile of SAT scores at the institution (math)",
"75th percentile of SAT scores at the institution (writing)",
"Midpoint of SAT scores at the institution (critical reading)",
"Midpoint of SAT scores at the institution (math)",
"Midpoint of SAT scores at the institution (writing)",
"75th percentile of the ACT cumulative score",
"75th percentile of the ACT English score",
"75th percentile of the ACT math score",
"75th percentile of the ACT writing score",
"Midpoint of the ACT cumulative score",
"Midpoint of the ACT English score",
"Midpoint of the ACT math score",
"Midpoint of the ACT writing score",
"Average SAT equivalent score of students admitted",
"Flag for distance-education-only education",
"Enrollment of undergraduate certificate/degree-seeking students",
"Enrollment of all undergraduate students",
"Flag for currently operating institution, 0=closed, 1=operating",
"Average cost of attendance (academic year institutions)",
"In-state tuition and fees",
"Out-of-state tuition and fees",
"Net tuition revenue per full-time equivalent student",
"Instructional expenditures per full-time equivalent student",
"Average faculty salary",
"Proportion of faculty that is full-time",
"First-time, full-time student retention rate at four-year institutions",
"Cumulative loan debt at the 75th percentile",
"Cumulative loan debt at the 25th percentile",
"Average age of entry",
"Share of female students",
"Share of married students",
"Share of veteran students",
"Share of first-generation students",
"Average family income in real 2015 dollars",
"Median family income in real 2015 dollars")
# Changing numeric columns to numerics
for(x in 7:ncol(full)){
full[,x] = as.numeric(full[,x])
}
colsToRemove = list()
for(x in 1:nrow(full)){
if(is.na(full[x,'ADM_RATE']) == TRUE){
colsToRemove = c(colsToRemove, x)
}
}
full = full[!is.na(full$ADM_RATE),]
# Labeling
for(x in 1:ncol(full)){
label(full[,x]) = labels[x]
}
# Save to google drive
write.csv(full, file = "C:/Users/acegi/Google Drive/Spring 2018/ITP 350/Project/FullData.csv")
library(readr)
FullData <- read_csv("C:/Users/acegi/Google Drive/Spring 2018/ITP 350/Project/FullData.csv")
View(FullData)
View(full)
p75 = ggplot(df, aes(CONTROL, CUML_DEBT_P75)) +
geom_bar(aes(fill = df$CONTROL), stat = "identity", position = "dodge", show.legend = FALSE) +
coord_cartesian(ylim=c(0,50000)) +
labs(title="Control of Institution vs. Average Debt at the 75th Percentile",x="Control of Institution",y="Average Debt for the 75th Percentile")
p25 = ggplot(df, aes(CONTROL, CUML_DEBT_P25)) +
geom_bar(aes(fill = df$CONTROL),stat = "identity", position = "dodge", show.legend = FALSE) +
coord_cartesian(ylim=c(0,50000)) +
labs(title="Control of Institution vs. Average Debt at the 25th Percentile",x="Control of Institution",y="Average Debt for the 25th Percentile")
#grid.arrange(p25, p75, nrow=1)
